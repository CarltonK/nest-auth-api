model User {
    id                      Int                @id @default(autoincrement())
    emailAddress            String             @unique @db.VarChar(200)
    firstName               String?            @db.VarChar(200)
    lastName                String?            @db.VarChar(200)
    passwordHash            String
    emailVerifiedAt         DateTime?
    emailVerificationToken  String?
    emailVerificationSentAt DateTime?
    passwordResetToken      String?
    passwordResetSentAt     DateTime?
    metadata                Json?
    appMetadata             Json?
    mfaEnabled              Boolean            @default(false)
    isActive                Boolean            @default(false)
    isLocked                Boolean            @default(false)
    forcePasswordChange     Boolean            @default(false)
    failedAttemptsCount     Int                @default(0)
    passwordChangedAt       DateTime
    lastLoginAt             DateTime?
    lockedAt                DateTime?
    lockExpiresAt           DateTime?
    phone                   String?            @db.VarChar(20)
    phoneVerifiedAt         DateTime?
    pendingPhone            String?            @db.VarChar(20)
    pendingEmail            String?            @db.VarChar(255)
    phoneVerificationCode   String?            @db.VarChar(6)
    phoneVerificationSentAt DateTime?
    createdAt               DateTime           @default(now())
    updatedAt               DateTime           @updatedAt
    auditLog                AuditLog[]
    passwordHistory         PasswordHistory[]
    sessions                Session[]
    authTokens              AuthToken[]
    mfaMethods              MfaMethod[]
    userAgencies            UserAgency[]
    identities              AuthUseridentity[]
    config                  AuthConfig[]
}

model AuditLog {
    id        String   @id @default(uuid())
    userId    Int?
    eventType String
    severity  String
    details   Json
    createdAt DateTime @default(now())
    user      User?    @relation(fields: [userId], references: [id])
}

model PasswordHistory {
    id           String   @id @default(uuid())
    userId       Int
    user         User     @relation(fields: [userId], references: [id])
    passwordHash String
    createdAt    DateTime @default(now())
}

model AuthOauthprovider {
    id         Int                @id @default(autoincrement())
    name       String             @unique
    createdAt  DateTime           @default(now())
    updatedAt  DateTime?          @updatedAt
    identities AuthUseridentity[]
}

model AuthUseridentity {
    id             Int               @id @default(autoincrement())
    uuid           String            @db.Char(36)
    userId         Int
    providerId     Int
    providerUserId String            @db.VarChar(255)
    accessToken    String?           @db.Text
    refreshToken   String?           @db.Text
    tokenExpiresAt DateTime?
    createdAt      DateTime          @default(now())
    updatedAt      DateTime?         @updatedAt
    user           User              @relation(fields: [userId], references: [id])
    provider       AuthOauthprovider @relation(fields: [providerId], references: [id])

    @@unique([userId, providerId])
}
